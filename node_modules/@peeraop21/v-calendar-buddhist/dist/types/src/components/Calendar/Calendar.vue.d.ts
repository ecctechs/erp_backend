declare const _default: import("vue").DefineComponent<{
    view: {
        type: import("vue").PropType<import("../../use/calendar").CalendarView>;
        default: string;
        validator(value: string): boolean;
    };
    rows: {
        type: NumberConstructor;
        default: number;
    };
    columns: {
        type: NumberConstructor;
        default: number;
    };
    step: NumberConstructor;
    titlePosition: {
        type: import("vue").PropType<import("../../utils/page").TitlePosition>;
        default: () => import("../../utils/page").TitlePosition;
    };
    navVisibility: {
        type: import("vue").PropType<import("../../utils/popovers").PopoverVisibility>;
        default: () => import("../../utils/popovers").PopoverVisibility;
    };
    showWeeknumbers: (BooleanConstructor | StringConstructor)[];
    showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
    isExpanded: BooleanConstructor;
    initialPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    initialPagePosition: {
        type: NumberConstructor;
        default: number;
    };
    minPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    maxPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    transition: import("vue").PropType<import("../../use/calendar").MoveTransition>;
    attributes: import("vue").PropType<import("../../utils/attribute").AttributeConfig[]>;
    trimWeeks: BooleanConstructor;
    disablePageSwipe: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: () => any;
    };
    isDark: {
        type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
        default: () => any;
    };
    firstDayOfWeek: import("vue").PropType<import("../../utils/date/helpers").DayOfWeek>;
    masks: ObjectConstructor;
    locale: import("vue").PropType<string | Record<string, any> | import("../../utils/locale").default>;
    timezone: StringConstructor;
    minDate: null;
    maxDate: null;
    disabledDates: null;
}, {
    theme: import("vue").ComputedRef<import("../../utils/theme").Theme>;
    color: import("vue").ComputedRef<string>;
    displayMode: import("vue").ComputedRef<"light" | "dark">;
    locale: import("vue").ComputedRef<import("../../utils/locale").default>;
    masks: import("vue").ComputedRef<any>;
    attributes: import("vue").ComputedRef<import("../../utils/attribute").Attribute[]>;
    disabledAttribute: import("vue").ComputedRef<import("../../utils/attribute").Attribute>;
    disabledDates: import("vue").ComputedRef<import("../../utils/date/range").DateRange[]>;
    attributeContext: import("vue").ComputedRef<import("../../utils/date/range").DateRangeContext | null>;
    count: import("vue").ComputedRef<number>;
    step: import("vue").ComputedRef<number>;
    firstPage: import("vue").ComputedRef<import("../../utils/page").Page | null>;
    lastPage: import("vue").ComputedRef<import("../../utils/page").Page | null>;
    canMovePrev: import("vue").ComputedRef<boolean>;
    canMoveNext: import("vue").ComputedRef<boolean>;
    minPage: import("vue").ComputedRef<import("../../utils/page").PageAddress | null>;
    maxPage: import("vue").ComputedRef<import("../../utils/page").PageAddress | null>;
    isMonthly: import("vue").ComputedRef<boolean>;
    isWeekly: import("vue").ComputedRef<boolean>;
    isDaily: import("vue").ComputedRef<boolean>;
    navVisibility: import("vue").ComputedRef<import("../../utils/popovers").PopoverVisibility>;
    showWeeknumbers: import("vue").ComputedRef<boolean>;
    showIsoWeeknumbers: import("vue").ComputedRef<boolean>;
    getDateAddress: (date: import("../../utils/date/helpers").DateSource) => import("../../utils/page").PageAddress;
    canMove: (target: import("../../use/calendar").MoveTarget, opts?: Partial<import("../../use/calendar").MoveOptions>) => boolean;
    canMoveBy: (pages: number, opts?: Partial<import("../../use/calendar").MoveOptions>) => boolean;
    move: (target: import("../../use/calendar").MoveTarget, opts?: Partial<import("../../use/calendar").MoveOptions>) => Promise<boolean>;
    moveBy: (pages: number, opts?: Partial<import("../../use/calendar").MoveOptions>) => Promise<boolean>;
    movePrev: () => Promise<boolean>;
    moveNext: () => Promise<boolean>;
    onTransitionBeforeEnter: () => void;
    onTransitionAfterEnter: () => void;
    tryFocusDate: (date: Date) => boolean;
    focusDate: (date: Date, opts?: Partial<import("../../use/calendar").MoveOptions>) => Promise<boolean>;
    onKeydown: (event: KeyboardEvent) => void;
    onDayKeydown: (day: import("../../utils/page").CalendarDay, event: KeyboardEvent) => void;
    onDayClick: (day: import("../../utils/page").CalendarDay, event: MouseEvent) => void;
    onDayMouseenter: (day: import("../../utils/page").CalendarDay, event: MouseEvent) => void;
    onDayMouseleave: (day: import("../../utils/page").CalendarDay, event: MouseEvent) => void;
    onDayFocusin: (day: import("../../utils/page").CalendarDay, event: FocusEvent | null) => void;
    onDayFocusout: (day: import("../../utils/page").CalendarDay, event: FocusEvent) => void;
    onWeeknumberClick: (week: import("../../utils/page").CalendarWeek, event: MouseEvent) => void;
    containerRef: import("vue").Ref<(Pick<Element, "querySelector"> & import("../../utils/helpers").CustomElement) | null>;
    navPopoverRef: import("vue").Ref<import("vue").DefineComponent<{}, {}, any, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}> | null>;
    lastFocusedDay: import("vue").Ref<import("../../utils/page").CalendarDay | null>;
    focusableDay: import("vue").Ref<number>;
    inTransition: import("vue").Ref<boolean>;
    navPopoverId: import("vue").Ref<string>;
    dayPopoverId: import("vue").Ref<string>;
    view: import("vue").Ref<import("../../use/calendar").CalendarView>;
    pages: import("vue").Ref<import("../../utils/page").Page[]>;
    transitionName: import("vue").Ref<string>;
    refreshing: import("vue").Ref<boolean>;
    emit: any;
    slots: any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    view: {
        type: import("vue").PropType<import("../../use/calendar").CalendarView>;
        default: string;
        validator(value: string): boolean;
    };
    rows: {
        type: NumberConstructor;
        default: number;
    };
    columns: {
        type: NumberConstructor;
        default: number;
    };
    step: NumberConstructor;
    titlePosition: {
        type: import("vue").PropType<import("../../utils/page").TitlePosition>;
        default: () => import("../../utils/page").TitlePosition;
    };
    navVisibility: {
        type: import("vue").PropType<import("../../utils/popovers").PopoverVisibility>;
        default: () => import("../../utils/popovers").PopoverVisibility;
    };
    showWeeknumbers: (BooleanConstructor | StringConstructor)[];
    showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
    isExpanded: BooleanConstructor;
    initialPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    initialPagePosition: {
        type: NumberConstructor;
        default: number;
    };
    minPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    maxPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    transition: import("vue").PropType<import("../../use/calendar").MoveTransition>;
    attributes: import("vue").PropType<import("../../utils/attribute").AttributeConfig[]>;
    trimWeeks: BooleanConstructor;
    disablePageSwipe: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: () => any;
    };
    isDark: {
        type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
        default: () => any;
    };
    firstDayOfWeek: import("vue").PropType<import("../../utils/date/helpers").DayOfWeek>;
    masks: ObjectConstructor;
    locale: import("vue").PropType<string | Record<string, any> | import("../../utils/locale").default>;
    timezone: StringConstructor;
    minDate: null;
    maxDate: null;
    disabledDates: null;
}>> & {
    [x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {
    view: import("../../use/calendar").CalendarView;
    trimWeeks: boolean;
    titlePosition: import("../../utils/page").TitlePosition;
    color: string;
    isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
    navVisibility: import("../../utils/popovers").PopoverVisibility;
    rows: number;
    columns: number;
    isExpanded: boolean;
    initialPagePosition: number;
    disablePageSwipe: boolean;
}>;
export default _default;
